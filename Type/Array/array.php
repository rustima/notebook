<?php
/* php中的数组实际是一个有序映射。映射是一种把values关联到keys的类型。
 * 此类型在很多方面做了优化，因此可以把它当成真正的数组，或列表（向量，散列表（是一种映射的实现），字典，集合，栈，队列以及更多可能性。
 * 由于数组元素的值也可以是另一个数组，树形结构和多维数组也是允许的。
 * 
 * 定义数组array(key=>value,...),键(key)可以是一个整数integer或字符串string,值value可以是任意类型
 * 最后一个数组单元之后的逗号可省略，通常单行数组定义不加逗号，多行数组保留最后一个逗号方便添加新单元
 * 
 * 自5.4起可以使用短数组定义语法，用[]替代array()
 * 
 */
$array = array("foo" => "bar","bar" => "foo");
$array = array(
    "foo" => "bar",
    "bar" => "foo",
);

//php5.4起
$array = [
    "foo" => "bar",
    "bar" => "foo",
];

/*
 *key可以是integer或者string
 *key会有如下的强制转换：
 *1.包含有合法整型值的字符串会被转换为整型。例如键名"8"实际会被储存为8.但是"08"则不会，因为它不是合法的十进制数值
 *2.浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名8.7实际会被储存为8
 *3.布尔值也会被转换成整型。即键名TRUE实际会被储存为1，而键名FALSE会被储存为0
 *4.NULL会被转换成空字符串，即键名NULL实际会被储存为"";
 *5.数组和对象不能被用为键名。若这么做会导致警告：Illegal offset type
 *
 * 如果在数组定义中多个单元都使用了同一个键名，则最后一个会覆盖之前的
 */
$array = array(
    1 =>"a",
    "1" => "b",
    1.5 => "c",
    true => "d",
);
var_dump($array); //array(1){[1] => string(1) "d"}

/*
 * php数组可以同时含有integer和string类型的键名，因为PHP实际并不区分索引数组和关联数组
 * 如果给出的值没有指定键名，则取当前最大的整数索引值，而新的键名将是该值+1。如果指定的键名已经有值，则该值会被覆盖
 */

//混合键名
$array = array(
    "foo" => "bar",
    "bar" => "foo",
    100=>-100,
    -100=>100,
);
var_dump($array); //太长不截

/*key为可选项。若未指定，则自动将之前使用过的最大键名+1作为新键名
 */
$array = array("foo","bar","hello","wao");
var_dump($array);

//对某单元指定键名
$array = array(
    "a",
    "b",
    6=>"c",
    "d",
);
var_dump($array);    //"d"的键名为7
$array = array(
    "a",
    "b",
    "6a"=>"c",
    "d",
);
var_dump($array);    //"d"的键名为2